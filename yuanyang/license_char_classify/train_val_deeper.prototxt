name: "CharPCINet"
layer 
{
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include 
  {
    phase: TRAIN
  }
  transform_param 
  {
    crop_size: 46
    mean_file: "yuanyang/license_char_classify/license_char_mean.binaryproto"
  }
  data_param 
  {
    source: "yuanyang/license_char_classify/leveldb_train/"
    batch_size: 256
    backend: LEVELDB
  }
}
layer 
{
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include 
  {
    phase: TEST
  }
  transform_param 
  {
    mean_file: "yuanyang/license_char_classify/license_char_mean.binaryproto"
    crop_size: 46
  }
  data_param 
  {
    source: "yuanyang/license_char_classify/leveldb_test/"
    batch_size: 256
    backend: LEVELDB
  }
}
layer 
{
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param 
  {
    lr_mult: 1
    decay_mult: 1
  }
  param 
  {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param 
  {
    num_output: 64
    kernel_size: 3
    stride: 1
    weight_filler 
    {
      type: "gaussian"
      std: 0.01
    }
    bias_filler 
    {
      type: "constant"
      value: 0
    }
  }
}
layer 
{
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer 
{
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param 
  {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer 
{
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param 
  {
    lr_mult: 1
    decay_mult: 1
  }
  param 
  {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param 
  {
    num_output: 128
    kernel_size: 3
    stride: 1
    weight_filler 
    {
      type: "gaussian"
      std: 0.01
    }
    bias_filler 
    {
      type: "constant"
      value: 0
    }
  }
}
layer 
{
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param 
  {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param 
  {
    lr_mult: 1
    decay_mult: 1
  }
  param 
  {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param 
  {
    num_output: 256
    kernel_size: 3
    stride: 1
    weight_filler 
    {
      type: "gaussian"
      std: 0.01
    }
    bias_filler 
    {
      type: "constant"
      value: 0
    }
  }
}
layer 
{
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer 
{
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param 
  {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4"
  param 
  {
    lr_mult: 1
    decay_mult: 1
  }
  param 
  {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param 
  {
    num_output: 512
    kernel_size: 3
    stride: 1
    weight_filler 
    {
      type: "gaussian"
      std: 0.01
    }
    bias_filler 
    {
      type: "constant"
      value: 0
    }
  }
}
layer 
{
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer 
{
  name: "pool4"
  type: "Pooling"
  bottom: "conv4"
  top: "pool4"
  pooling_param 
  {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "fc4_new"
  type: "InnerProduct"
  bottom: "pool4"
  top: "fc4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param 
  {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer 
{
  name: "relu5"
  type: "ReLU"
  bottom: "fc4"
  top: "fc4"
}
layer 
{
  name: "drop4"
  type: "Dropout"
  bottom: "fc4"
  top: "fc4"
  dropout_param 
  {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc5_new"
  type: "InnerProduct"
  bottom: "fc4"
  top: "fc5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param 
  {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler 
    {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc5"
  top: "fc5"
}
layer {
  name: "drop5"
  type: "Dropout"
  bottom: "fc5"
  top: "fc5"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc6_new"
  type: "InnerProduct"
  bottom: "fc5"
  top: "fc6"
  param 
  {
    lr_mult: 1
    decay_mult: 1
  }
  param 
  {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param 
  {
    num_output: 69
    weight_filler 
    {
      type: "gaussian"
      std: 0.01
    }
    bias_filler 
    {
      type: "constant"
      value: 0
    }
  }
}
# for deploy
#layer
#{
#    name: "prob"
#    type: "Softmax"
#    bottom: "fc6"
#    top: "prob"
#}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc6"
  bottom: "label"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc6"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
