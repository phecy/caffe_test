name: "vgg_like_face"

layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 128
    mean_file: "yuanyang/face_verfiry/face_mean.binaryproto"
  }
  data_param {
    source: "yuanyang/face_verfiry/train_lmdb/"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    mean_file: "yuanyang/face_verfiry/face_mean.binaryproto"
    crop_size: 128
  }
  data_param {
    source: "yuanyang/face_verfiry/test_lmdb/"
    batch_size: 5
    backend: LMDB
  }
}

# ~~ layer 1 ~~
layer {
  name: "conv1_1" type: "Convolution" bottom: "data" top: "conv1_1"
  convolution_param { 
    num_output: 64 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.059 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu1_1" type: "ReLU" bottom: "conv1_1" top: "conv1_1"
}
layer {
  name: "conv1_2" type: "Convolution" bottom: "conv1_1" top: "conv1_2"
  convolution_param {
    num_output: 64 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.059 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu1_2" type: "ReLU" bottom: "conv1_2" top: "conv1_2"
}
layer {
    name : "pool1" type : "Pooling" bottom: "conv1_2" top : "pool1"
    pooling_param { pool: MAX kernel_size: 2 stride: 2 }
}


# ~~ layer 2 ~~

layer {
  name: "conv2_1" type: "Convolution" bottom: "pool1" top: "conv2_1"
  convolution_param {
    num_output: 128 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.042 }
    bias_filler { type: "constant" value: 0}
  }
}
layer {
    name: "relu2_1" type: "ReLU" bottom: "conv2_1" top: "conv2_1"
}
layer {
  name: "conv2_2" type: "Convolution" bottom: "conv2_1" top: "conv2_2"
  convolution_param {
    num_output: 128 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.042 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu2_2" type: "ReLU"  bottom: "conv2_2" top: "conv2_2"
}
layer {
    name : "pool2" type : "Pooling" bottom: "conv2_2" top : "pool2"
    pooling_param { pool: MAX kernel_size: 2 stride: 2 }
}

# ~~ layer 3 ~~
layer {
  name: "conv3_1" type: "Convolution" bottom: "pool2" top: "conv3_1"
  convolution_param {
    num_output: 256 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.027 }
    bias_filler { type: "constant" value: 0  }
  }
}
layer {
    name: "relu3_1" type: "ReLU"  bottom: "conv3_1" top: "conv3_1"
}

layer {
  name: "conv3_2" type: "Convolution" bottom: "conv3_1" top: "conv3_2"
  convolution_param {
    num_output: 256 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.027 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu3_2" type: "ReLU"  bottom: "conv3_2" top: "conv3_2"
}
layer {
  name: "conv3_3" type: "Convolution" bottom: "conv3_2"  top: "conv3_3"
  convolution_param {
    num_output: 256 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.027 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu3_3" type: "ReLU"  bottom: "conv3_3" top: "conv3_3"
}

layer {
    name : "pool3" type : "Pooling" bottom: "conv3_3" top : "pool3"
    pooling_param { pool: MAX kernel_size: 2 stride: 2 }
}


# ~~ layer 4 ~~
layer {
  name: "conv4_1" type: "Convolution" bottom: "pool3" top: "conv4_1"
  convolution_param {
    num_output: 384 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.024 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu4_1" type: "ReLU"  bottom: "conv4_1" top: "conv4_1"
}

layer {
  name: "conv4_2" type: "Convolution" bottom: "conv4_1" top: "conv4_2"
  convolution_param {
    num_output: 384 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.024 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu4_2" type: "ReLU"  bottom: "conv4_2" top: "conv4_2"
}
layer {
  name: "conv4_3" type: "Convolution" bottom: "conv4_2" top: "conv4_3"
  convolution_param {
    num_output: 384 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.024 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu4_3" type: "ReLU"  bottom: "conv4_3" top: "conv4_3"
}

layer {
    name : "pool4" type : "Pooling" bottom: "conv4_3" top : "pool4"
    pooling_param { pool: MAX kernel_size: 2 stride: 2 }
}

# ~~ layer 5 ~~ 
layer {
  name: "conv5_1" type: "Convolution" bottom: "pool4" top: "conv5_1"
  convolution_param {
    num_output: 512 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.021 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu5_1" type: "ReLU"  bottom: "conv5_1" top: "conv5_1"
}

layer {
  name: "conv5_2" type: "Convolution" bottom: "conv5_1" top: "conv5_2"
  convolution_param {
    num_output: 512 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.021 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu5_2" type: "ReLU"  bottom: "conv5_2" top: "conv5_2"
}
layer {
  name: "conv5_3" type: "Convolution" bottom: "conv5_2" top: "conv5_3"
  convolution_param {
    num_output: 512 kernel_size: 3 stride: 1 pad: 1
    weight_filler { type: "gaussian" std: 0.021 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
    name: "relu5_3" type: "ReLU"  bottom: "conv5_3" top: "conv5_3"
}
layer {
    name : "pool5" type : "Pooling" bottom: "conv5_3" top : "pool5"
    pooling_param { pool: MAX kernel_size: 2 stride: 2 }
}

layer {
  name: "flatten1" type: "Flatten" bottom: "pool5" top: "flatten1"
}

layer {
  name: "dropout_flatten" type: "Dropout" bottom: "flatten1" top: "flatten1"
  dropout_param { dropout_ratio: 0.5 }
}

layer {
  name: "fc1" type: "InnerProduct" bottom: "flatten1" top: "fc1"
  inner_product_param {
    num_output: 512
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0}
  }
}
layer {
    name: "slice_fc1" type: "Slice" bottom: "fc1" top: "fc1_1" top: "fc1_2"
    slice_param{ slice_dim: 1}
}
layer {
    name: "eltwise_fc1"type: "Eltwise" bottom: "fc1_1" bottom: "fc1_2" top: "fc1_merge"
    eltwise_param{ operation: MAX }
}

layer {
    name : "dropoutf12" type: "Dropout" bottom: "fc1_merge" top: "fc1_merge"
    dropout_param{ dropout_ratio: 0.2 }
}

# plug in softmax signal
layer {
  name: "classfy1" type: "InnerProduct" bottom: "fc1_merge" top: "classfy1"
  #param { lr_mult: 1 decay_mult: 10 }
  #param { lr_mult: 1 decay_mult: 10 }
  inner_product_param {
    num_output: 9515
    weight_filler { type: "gaussian"  std: 0.001 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
	name: "loss1" type: "SoftmaxWithLoss" bottom: "classfy1" bottom: "label"
}
layer {
	name: "accuracy" type: "Accuracy" bottom: "classfy1" bottom: "label" top: "accuracy"
	include { phase: TEST }
}


